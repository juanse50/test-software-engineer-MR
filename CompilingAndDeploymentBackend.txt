Comandos para generacion de archivo jar:

gradlew clean  #este comando sirve para hacer una limpieza del proyecto

gradlew build  #este comando sirve para hacer la construccion del archivo .jar

#El archivo .jar se genera en la carpeta \applications\app-service\build\libs

java -jar test-software-engineer.jar  #este comando sirve para ejecutar el archivo .jar

comando para ejecutar el proyecto sin generar .jar:

gradlew bootRun #este comando sirve para ejecutar proyecto de una vez

Generacion de docker:

docker build -t test-software-engineer . #ejecutar este comando desde la carpeta base del proyecto backend donde tenemos el archivo Dockerfile

ejecucion del docker:

docker run -p 8080:8080 test-software-engineer

explicacion de la arquitectura del proyecto:

## Domain

Es el modulo mas interno de la arquitectura, pertenece a la capa del dominio y encapsula la logica y reglas del negocio mediante modelos y entidades del dominio.

## Usecases

Este modulo gradle perteneciente a la capa del dominio, implementa los casos de uso del sistema, define logica de aplicacion y reacciona a las invocaciones desde el modulo de entry points, orquestando los flujos hacia el modulo de entities.

## Infrastructure

### Helpers

En el apartado de helpers tendremos utilidades generales para los Driven Adapters y Entry Points.

Estas utilidades no est�n arraigadas a objetos concretos, se realiza el uso de generics para modelar comportamientos
gen�ricos de los diferentes objetos de persistencia que puedan existir, este tipo de implementaciones se realizan
basadas en el patr�n de dise�o [Unit of Work y Repository](https://medium.com/@krzychukosobudzki/repository-design-pattern-bc490b256006)

Estas clases no puede existir solas y debe heredarse su compartimiento en los **Driven Adapters**

### Driven Adapters

Los driven adapter representan implementaciones externas a nuestro sistema, como lo son conexiones a servicios rest,
soap, bases de datos, lectura de archivos planos, y en concreto cualquier origen y fuente de datos con la que debamos
interactuar.

### Entry Points

Los entry points representan los puntos de entrada de la aplicaci�n o el inicio de los flujos de negocio.

## Application

Este m�dulo es el m�s externo de la arquitectura, es el encargado de ensamblar los distintos m�dulos, resolver las dependencias y crear los beans de los casos de use (UseCases) de forma autom�tica, inyectando en �stos instancias concretas de las dependencias declaradas. Adem�s inicia la aplicaci�n (es el �nico m�dulo del proyecto donde encontraremos la funci�n �public static void main(String[] args)�.

**Los beans de los casos de uso se disponibilizan automaticamente gracias a un '@ComponentScan' ubicado en esta capa.**